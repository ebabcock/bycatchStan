M<-27
R<-15
C<-74
N<-C*M/R
N
loglikefunc<-function(M,R,C,N) {
log(choose(M,R))+log(choose(N-M,C-R))-log(choose(N,C))
}
elephant<-data.frame(N=90:250)
elephant<-data.frame(N=90:250)
elephant<-elephant %>% mutate(LL=loglikefunct(M,R,C,N))
elephant<-elephant %>% mutate(LL=loglikefunc(M,R,C,N))
head(elephant)
ggplot(elephant,aes(x=N,y=LL))+geom_line()
filter(elephant,LL=max(LL))
filter(elephant,LL==max(LL))
range(elephant$N[elephant$LL>(max(elephant$LL)-1.92)])
range(elephant$N[elephant$LL>(max(elephant$LL)-1.92)])
bees<-read.csv(url("https://whitlockschluter3e.zoology.ubc.ca/Data/chapter20/chap20q16BeeLifespans.csv"))
summary(bees)
ggplot(bees,aes(x=hours))+geom_histogram()
ggplot(bees,aes(x=hours))+geom_histogram(binwidth=2)
ggplot(bees,aes(x=hours))+geom_histogram(binwidth=5)
ggplot(bees,aes(x=hours))+geom_histogram(binwidth=10)
beeLL<-data.frame(lambda=seq(0.01,0.1,by=0.001))
nrow(bees)
n<-nrow(bees)
n
beeLL<-beeLL %>% mutate(LL=n*lambda-labmda*sum(bees$hours))
beeLL<-beeLL %>% mutate(LL=n*lambda-lambda*sum(bees$hours))
head(beeLL)
beeLL<-beeLL %>% mutate(LL=n*log(lambda)-lambda*sum(bees$hours))
head(beeLL)
filter(beeLL,LL=max(LL))
filter(beeLL,LL==max(LL))
range(beeLL$lambda[beeLL$LL>(max(beeLL$LL)-1.92)])
G<-2*(log(dbinom(23,32,0.72))-log(dbinom(23,32,0.5)))
G
1-pchsiq(G,1)
1-pchisq(G,1)
binom.test(23,32)
library(lme4)
sleeplmIntercept<-lmer(Reaction~Days+(1|Subject),data=sleepstudy)
sleeplmBoth<-lmer(Reaction~Days+(Days|Subject),data=sleepstudy)
anova(sleeplmIntercept,sleeplmBoth)
leaf<-read.csv(url("https://whitlockschluter3e.zoology.ubc.ca/Data/chapter19/chap19q13BacteriaPerLeaf.csv
"))
leaf<-read.csv(url("https://whitlockschluter3e.zoology.ubc.ca/Data/chapter19/chap19q13BacteriaPerLeaf.csv"))
getdat<-function(x) mean(sample(x,length(x),replace=TRUE))
# Replace is true for bootstrapping, because we are making new independent samples
boots<-replicate(100000,getdat(leaf$bacteriaPerGramLeaf))
# Sampling distribution of the mean
ggplot(data.frame(Mean=boots),aes(x=Mean))+
geom_histogram(bins=50)
library(tidyverse)
leaf<-read.csv(url("https://whitlockschluter3e.zoology.ubc.ca/Data/chapter19/chap19q13BacteriaPerLeaf.csv"))
getdat<-function(x) mean(sample(x,length(x),replace=TRUE))
# Replace is true for bootstrapping, because we are making new independent samples
boots<-replicate(100000,getdat(leaf$bacteriaPerGramLeaf))
# Sampling distribution of the mean
ggplot(data.frame(Mean=boots),aes(x=Mean))+
geom_histogram(bins=50)
CI<-quantile(boots,c(0.025,0.5,0.975))
round(CI,2)
t.test(leaf$bacteriaPerGramLeaf)
t.test(leaf$bacteriaPerGramLeaf)$conf.int
ggplot(leaf,aes(x=bacteriaPerGramLeaf))+geom_histogram(binwidth=10)
ggplot(data.frame(Mean=boots),aes(x=Mean))+
geom_histogram(bins=50)
baby<-data.frame(p=seq(0.5,0.99,by=0.01))
baby$LL<-dbinom(15,17,baby$p)
ggplot(wasp,aes(x=p,y=log(Likelihood)))+geom_line()+
ggtitle("Log likelihood")
ggplot(baby,aes(x=p,y=log(Likelihood)))+geom_line()+
ggtitle("Log likelihood")
ggplot(baby,aes(x=p,y=LL))+geom_line()+
ggtitle("Log likelihood")
round(p[wasp$LL==max(wasp$LL)])   #Maximum likelihood parameter
round(baby$p[baby$LL==max(baby$LL)],2)   #Maximum likelihood parameter
round(range(baby$p[wasp$LL>max(baby$LL)-1.92]),2)    # Confidence interval
round(range(baby$p[baby$LL>max(baby$LL)-1.92]),2)    # Confidence interval
G<-2*(log(dbinom(15,17,0.88))-log(dbinom(15,17,0.5)))
1-pchisq(G,1)
binom.test(15,17)
baby<-data.frame(p=seq(0.5,0.99,by=0.01))
baby$LL<-dbinom(15,17,baby$p)
ggplot(baby,aes(x=p,y=LL))+geom_line()+
ggtitle("Log likelihood")
library(curl)
urlval<-"https://public.gulfcouncil.org:5001/"
list_Files<-curl(new_handle())
urlval<-"https://public.gulfcouncil.org:5001/"
ftp_base <- "ftp://"
list_files <- curl::new_handle()
curl::handle_setopt(list_files, ftp_use_epsv = TRUE, dirlistonly = TRUE)
con <- curl::curl(url = ftp_base, "r", handle = list_files)
files <- readLines(con)
ftp_base <- "https://public.gulfcouncil.org:5001/"
list_files <- curl::new_handle()
curl::handle_setopt(list_files, ftp_use_epsv = TRUE, dirlistonly = TRUE)
con <- curl::curl(url = ftp_base, "r", handle = list_files)
files <- readLines(con)
close(con)
files
ftpval<-"/FTP/Library Folder/Archived Meetings/_Council Meetings/Council Meeting Materials 1976 - 2004/2004/2004-01"
list_Files<-curl(new_handle())
install.packages(c("coda","mvtnorm","devtools","loo","dagitty","shape"))
devtools::install_github("rmcelreath/rethinking")
install.packages(c("coda","mvtnorm","devtools","loo","dagitty","shape"))
devtools::install_github("rmcelreath/rethinking")
install.packages("cmdstanr", repos = c('https://stan-dev.r-universe.dev', getOption("repos")))
devtools::install_github("rmcelreath/rethinking")
install_cmdstan()
cmdstanr::install_cmdstan()
cmdstanr::check_cmdstan_toolchain(fix = TRUE)
cmdstanr::install_cmdstan()
devtools::install_github("rmcelreath/rethinking")
## Example
library(rethinking)
f <- alist(
y ~ dnorm( mu , sigma ),
mu ~ dnorm( 0 , 10 ),
sigma ~ dexp( 1 )
)
fit <- quap(
f ,
data=list(y=c(-1,1)) ,
start=list(mu=0,sigma=1)
)
precis(fit)
fit_stan <- ulam( f , data=list(y=c(-1,1)) )
precis(fit)
precis(fit)
precis(fit_stan)
stan_code(fit_stan)
stancode(fit_stan)
install.packages("brms")
library(brms)
library(rethinking)
?rethinking
data(cars)
flist <- alist(
dist ~ dnorm( mu , sigma ) ,
mu <- a+b*speed ,
c(a,b) ~ dnorm(0,1) ,
sigma ~ dexp(1)
)
fit <- quap( flist , start=list(a=40,b=0.1,sigma=20) , data=cars )
precis(fit)
predict(fit)
?sim
simvals<-sim(fit)
summary(simvals)
postcheck(fit)
DeGeorge<-data.frame(Disease=c("yes","no"),
Prob.disease=c(1/4000,3999/4000),
Conditional.prob=c(0.99,0.0011))
DeGeorge$Prob.pos.and.disease<-DeGeorge$Prob.disease*DeGeorge$Conditional.prob
DeGeorge$Prob.disease.given.positive<-DeGeorge$Prob.pos.and.disease/sum(DeGeorge$Prob.pos.and.disease)
DeGeorge
Prior P(disease)=0.00025
P(positive result|disease)=0.99
library(tidyverse)
library(dagitty)
library(rethinking)
theme_set(theme_bw())
plotval<-dagitty("dag{
N->F;
p->F;
N->M;
p->M
}")
coordinates(plotval)<-list(x=c(N=1,p=1,F=2,M=2),
y=c(N=1,p=2,F=2,M=1))
plot(plotval)
# Some example beta distributions
?dbeta
newfunction<-function(x) dbeta(x,1,100)
ggplot()+
geom_function(fun=newfunction)
newfunction<-function(x) dbeta(x,1,2)
ggplot()+
geom_function(fun=newfunction)
ggplot()+
geom_function(fun=function(x) dbeta(x,1,1),aes(color="beta(1,1)"))+
geom_function(fun=function(x) dbeta(x,1,2),aes(color="beta(1,2)"))+
geom_function(fun=function(x) dbeta(x,2,1),aes(color="beta(2,1)"))+
geom_function(fun=function(x) dbeta(x,2,2),aes(color="beta(2,2)"))+
geom_function(fun=function(x) dbeta(x,2,5),aes(color="beta(2,5)"))+
geom_function(fun=function(x) dbeta(x,1,5),aes(color="beta(1,5)"))+
labs(color="Prior",y="Probability density",x="Prior")
# Sampling from a distribution
nsim<-10000
posteriorValues<-rnorm(nsim, 5,2 )
summary(posteriorValues)
ggplot(data.frame(posterior=posteriorValues),aes(x=posterior))+
geom_function(fun=function(x) dnorm(x,5,2), color="red",)+
geom_density()
mean(posteriorValues)
sd(posteriorValues)
CI80<-quantile(posteriorValues, c(0.1,0.9))
CI80
ProbabilityGreaterThan10<-sum(posteriorValues>10)/length(posteriorValues)
ProbabilityGreaterThan10
#Exact beta calculation of posterior, with made up data to build
N<-20
F<-0
p<-0.6
F<-rbinom(1,N,p)
#Plot posterior
ggplot()+
geom_function(fun=function(x) dbeta(x,F+1,N-F+1))
#Draw random sample from posterior
posteriorSample<-rbeta(1000,F+1,N-F+1)
ggplot()+
geom_function(fun=function(x) dbeta(x,F+1,N-F+1))+
geom_density(data.frame(posterior=posteriorSample),
mapping=aes(x=posterior),color="red")
summary(posteriorSample)
## Estimation with a grid search
#First make a function to calculate the posterior
getPosterior<-function(F,p,N) {
prior<-dbeta(p,1,1)
Likelihood<-dunif(0,1)
posterior<-prior*Likelihood
posterior
}
getPosterior(12,0.5,15)
## Estimation with a grid search
#First make a function to calculate the posterior
getPosterior<-function(F,p,N) {
prior<-dbeta(p,1,1)
Likelihood<-dbinom(F,N,p)
posterior<-prior*Likelihood
posterior
}
getPosterior(12,0.5,15)
#Grid search
gridValues<-data.frame(p=seq(0,1,0.01))
gridValues$posterior<-getPosterior(F=F,p=gridValues$p,N=N)
head(gridValues)
#Mode plot
gridValues$p[gridValues$posterior==max(gridValues$posterior)]
rescaleval<- dbeta(0.2,F+1,N-F+1)/max(gridValues$posterior)
ggplot(gridValues,aes(x=p,y=posterior*rescaleval))+
geom_line(linewidth=3)+
geom_function(fun=function(x) dbeta(x,F+1,N-F+1),color="red")+
ggtitle("Comparing grid search to analytic (red)")+
ylab("Probability density")
## Estimation with a grid search
#First make a function to calculate the posterior
getPosterior<-function(F,p,N) {
prior<-dunif(p,0,1)
Likelihood<-dbinom(F,N,p)
posterior<-prior*Likelihood
posterior
}
getPosterior(12,0.5,15)
#Grid search
gridValues<-data.frame(p=seq(0,1,0.01))
gridValues$posterior<-getPosterior(F=F,p=gridValues$p,N=N)
head(gridValues)
#Mode plot
gridValues$p[gridValues$posterior==max(gridValues$posterior)]
rescaleval<- dbeta(0.2,F+1,N-F+1)/max(gridValues$posterior)
F
N
#Mode plot
gridValues$p[gridValues$posterior==max(gridValues$posterior)]
rescaleval<- dbeta(0.2,F+1,N-F+1)/max(gridValues$posterior)
ggplot(gridValues,aes(x=p,y=posterior*rescaleval))+
geom_line(linewidth=3)+
geom_function(fun=function(x) dbeta(x,F+1,N-F+1),color="red")+
ggtitle("Comparing grid search to analytic (red)")+
ylab("Probability density")
rescaleval
dbeta(0.2,F+1,N-F+1)
max(gridValues$posterior)
rescaleval<- dbeta(0.75,F+1,N-F+1)/max(gridValues$posterior)
ggplot(gridValues,aes(x=p,y=posterior*rescaleval))+
geom_line(linewidth=3)+
geom_function(fun=function(x) dbeta(x,F+1,N-F+1),color="red")+
ggtitle("Comparing grid search to analytic (red)")+
ylab("Probability density")
rescaleval<- dbeta(F/N,F+1,N-F+1)/max(gridValues$posterior)
ggplot(gridValues,aes(x=p,y=posterior*rescaleval))+
geom_line(linewidth=3)+
geom_function(fun=function(x) dbeta(x,F+1,N-F+1),color="red")+
ggtitle("Comparing grid search to analytic (red)")+
ylab("Probability density")
simN<-15  #from our data
p<-0.4  # made up
simF<-rbernoulli(N,p) #for individual animals
simF
simF<-rbinom(1,N,p) # for total count
simF
#Plot posterior with simulated data
ggplot()+
geom_function(fun=function(x) dbeta(x,simF+1,N-simF+1))
N<-100
simF<-rbinom(1,N,p)
ggplot()+
geom_function(fun=function(x) dbeta(x,simF+1,N-simF+1))
N<-0
simF<-0
ggplot()+
geom_function(fun=function(x) dbeta(x,simF+1,N-simF+1))
# The posterior and prior with different sample sizes from the
# simulated data.
p<-0.4
Fturtle<-as.numeric(rbernoulli(8,p))
Fturtle
SimF<-data.frame(Fturtle=c(0,Fturtle)) %>%
mutate(N=0:8,
F=cumsum(Fturtle),
label=paste0("N=",N,", F=",F),
mode=F/N)
SimF
# Figure with increasing sample size
plotFunc<-function(i) {
ggplot()+
geom_function(fun=function(x) dbeta(x,SimF$F[i]+1,SimF$N[i]-SimF$F[i]+1))+
labs(title=SimF$label[i],subtitle=SimF$text[i],size=1)+
xlim(0,1)+
ylim(0,3.5)
}
plotFunc(1)
gridExtra::grid.arrange(plotFunc(1),plotFunc(2),
plotFunc(3),plotFunc(4),
plotFunc(5),plotFunc(6),
plotFunc(7),plotFunc(8),
plotFunc(9)
)
# priors are equivalent to data
ggplot()+
geom_function(fun=function(x) dbeta(x,3,6),aes(color="Study 1"))+
geom_function(fun=function(x) dbeta(x,4,8),aes(color="Study 2"))+
geom_function(fun=function(x) dbeta(x,6,13),aes(color="Combined"))+
labs(color="",x="p",y="Probability density")
N<-15
F<-12
#Plot posterior
ggplot()+
geom_function(fun=function(x) dbeta(x,F+1,N-F+1))+
geom_function(fun=function(x) dbeta(x,1,1),lty=2)+
labs(x="p",y="Probability density")+
ggtitle("Posterior")
#Simulate to summarize
nsim<-10000
simVals<-rbeta(nsim,F+1,N-F+1)
modefunc<-function(x) {
densityVal<-density(x)
densityVal$x[densityVal$y==max(densityVal$y)]
}
p<-c(mode=modefunc(simVals),
mean= mean(simVals),
sd=sd(simVals),
Q0.1=quantile(simVals,0.1),
Q0.9=quantile(simVals,0.9),
`Prob(>0.5)`=sum(simVals>0.5)/nsim)
round(p,2)
summary(simVals)
# Using quadratic approximation
turtleModel <- alist(
F ~ dbinom(N , p ),
p ~ dunif(0,1)
)
turtleFit<-quap(flist=turtleModel,
data=list(F=F,N=N))
turtleFit
precis(turtleFit)
posterior<-extract.samples(turtleFit)
ggplot(posterior,aes(x=p))+
geom_density()+
geom_function(fun=function(x) dbeta(x,F+1,N-F+1),color="red")
data<-list(y= structure(.Data= c(0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 1, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 1), .Dim=c(150, 3)), wetness=c(0.6055, 0.7581, 0.6262, 0.2999, 0.6707, 0.2169, 0.5311, 0.9971, 0.8829, 0.1200, 0.4439, 0.8868, 0.5487, 0.0371, 0.9884, 0.7670, 0.7979, 0.5120, 0.3610, 0.8794, 0.5932, 0.1797, 0.3990, 0.9888, 0.9428, 0.9785, 0.3738, 0.6347, 0.8558, 0.8355, 0.3196, 0.7387, 0.1733, 0.9594, 0.2854, 0.1543, 0.6478, 0.8788, 0.2080, 0.0822, 0.4533, 0.5656, 0.2780, 0.1188, 0.0534, 0.8297, 0.3384, 0.2939, 0.9051, 0.7126, 0.1014, 0.1897, 0.3693, 0.2159, 0.6069, 0.0682, 0.1567, 0.3502, 0.8128, 0.3182, 0.8826, 0.6533, 0.7350, 0.4662, 0.8113, 0.0805, 0.7662, 0.7356, 0.0938, 0.2881, 0.0178, 0.6942, 0.3457, 0.0167, 0.5085, 0.7425, 0.1153, 0.3446, 0.0021, 0.3126, 0.5467, 0.3746, 0.8996, 0.0794, 0.9408, 0.3166, 0.0736, 0.0991, 0.7981, 0.7108, 0.5711, 0.1967, 0.4142, 0.0299, 0.7353, 0.2038, 0.6513, 0.7736, 0.8934, 0.7312, 0.8417, 0.9141, 0.0522, 0.0963, 0.7979, 0.8071, 0.9027, 0.6871, 0.3479, 0.5847, 0.8997, 0.3164, 0.4939, 0.1962, 0.0665, 0.4859, 0.8429, 0.3606, 0.1270, 0.9562, 0.2324, 0.4261, 0.6230, 0.9178, 0.3441, 0.0743, 0.4770, 0.7466, 0.7212, 0.7690, 0.5158, 0.4282, 0.5591, 0.6982, 0.1137, 0.1277, 0.0153, 0.1206, 0.6919, 0.3204, 0.5022, 0.8659, 0.4953, 0.3191, 0.3909, 0.1670, 0.1226, 0.4264, 0.6854, 0.8465), experience= structure(.Data= c(0.2629,0.7681,0.4632,0.0347,0.6942,0.3793,0.8257,0.9184,0.0291,0.0851,0.8664,0.6729,0.2141,0.8182,0.5112,0.7231,0.9994,0.2593,0.8889,0.0271,0.6617,0.7134,0.6322,0.9110,0.0120,0.7125,0.5071,0.0933,0.0230,0.2648,0.8506,0.2678,0.8157,0.9997,0.0773,0.3399,0.1228,0.5444,0.4311,0.8257,0.4885,0.8093,0.0001,0.8778,0.0001,0.1741,0.0709,0.3400,0.2406,0.2971,0.9526,0.1001,0.5464,0.0894,0.6025,0.0276,0.9064,0.3880,0.5732,0.3806,0.7190,0.1789,0.1442,0.4873,0.8045,0.2417,0.8119,0.8185,0.7720,0.6787,0.5158,0.5382,0.8638,0.5059,0.3876,0.0354,0.9578,0.6783,0.0319,0.4747,0.9542,0.3844,0.0079,0.5857,0.1346,0.2485,0.2870,0.1538,0.0010,0.1861,0.0347,0.2228,0.1196,0.3966,0.2915,0.7952,0.4074,0.1231,0.1007,0.5826,0.0764,0.3042,0.1891,0.4942,0.1045,0.0245,0.1810,0.7308,0.0728,0.9211,0.6812,0.0564,0.7717,0.7595,0.0920,0.1999,0.7267,0.9182,0.0896,0.0339,0.6062,0.3728,0.0664,0.0226,0.0752,0.1412,0.7591,0.4404,0.2357,0.1086,0.2877,0.2253,0.2956,0.6273,0.0738,0.9519,0.8066,0.4466,0.0418,0.9738,0.8396,0.9725,0.6497,0.3693,0.6813,0.3983,0.0200,0.6009,0.6164,0.6052,0.4636,0.8807,0.1421,0.2116,0.4143,0.3738,0.9617,0.0682,0.1688,0.1538,0.1285,0.8995,0.6934,0.0057,0.1195,0.6095,0.0494,0.5320,0.6330,0.6647,0.6116,0.8232,0.1508,0.9933,0.8368,0.7356,0.2172,0.3455,0.6099,0.3923,0.2825,0.5080,0.5701,0.4404,0.9591,0.4665,0.0793,0.9748,0.9938,0.6867,0.6185,0.3902,0.5138,0.2769,0.2276,0.0708,0.2742,0.4445,0.9312,0.7508,0.1703,0.0753,0.7895,0.9684,0.4555,0.0218,0.4901,0.2017,0.0980,0.5433,0.3669,0.4694,0.7725,0.2769,0.3994,0.1361,0.2416,0.4178,0.5189,0.6667,0.7780,0.1274,0.8801,0.3253,0.0966,0.5767,0.6950,0.4375,0.7114,0.7518,0.0042,0.5760,0.9706,0.0801,0.5861,0.3869,0.2437,0.6306,0.0127,0.8937,0.4739,0.0873,0.5443,0.5312,0.3961,0.8939,0.2280,0.6158,0.5501,0.0417,0.0881,0.3159,0.5368,0.8419,0.3673,0.3185,0.7340,0.5245,0.6264,0.0405,0.4443,0.0149,0.8185,0.4974,0.5145,0.7712,0.6375,0.3086,0.2312,0.3209,0.9835,0.3253,0.3270,0.6154,0.6886,0.9663,0.8905,0.6715,0.5690,0.1281,0.1671,0.8568,0.7297,0.3237,0.4054,0.0577,0.1956,0.2481,0.0294,0.8796,0.5131,0.7339,0.9583,0.9740,0.2746,0.6991,0.7349,0.7633,0.4825,0.5073,0.8835,0.6382,0.2358,0.1891,0.5486,0.4821,0.8166,0.1639,0.3181,0.6165,0.4448,0.0619,0.7530,0.0685,0.4661,0.1248,0.8485,0.7180,0.9784,0.0473,0.6058,0.8190,0.8133,0.3078,0.1029,0.6236,0.0025,0.9028,0.1272,0.6115,0.2060,0.5627,0.8659,0.4462,0.9255,0.5182,0.0365,0.4298,0.4611,0.3363,0.3493,0.4571,0.1674,0.9454,0.4449,0.9368,0.6917,0.6531,0.5986,0.9817,0.2233,0.9457,0.0960,0.3967,0.7945,0.2489,0.5041,0.6837,0.3732,0.9767,0.5621,0.9134,0.5258,0.9786,0.8562,0.1284,0.6784,0.9639,0.6932,0.6508,0.5262,0.6729,0.7072,0.1777,0.7622,0.2905,0.4120,0.2267,0.8588,0.9609,0.3782,0.2367,0.2346,0.5267,0.1183,0.5795,0.4363,0.0275,0.3049,0.1933,0.2466,0.1789,0.1216,0.9184,0.8881,0.7526,0.7371,0.2912,0.4794,0.6268,0.2401,0.5614,0.0362,0.0123,0.7117,0.0390,0.6956,0.5796,0.0945,0.8291,0.6037,0.0919,0.3609,0.1314,0.2872,0.9786,0.0948,0.2236,0.3038,0.4986,0.2842,0.0051,0.3092,0.3716,0.3062,0.1660,0.7654,0.9052,0.4202,0.2462,0.5897,0.1592,0.3862,0.7451,0.4944,0.8984,0.2347,0.6420,0.8763,0.2355,0.4374,0.6729,0.8412,0.3527,0.3810,0.1747,0.1984,0.3921,0.8700,0.4790), .Dim=c(150, 3)), R=150, T=3)
data<-list(y= structure(.Data= c(0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 1, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 1), .Dim=c(150, 3)), wetness=c(0.6055, 0.7581, 0.6262, 0.2999, 0.6707, 0.2169, 0.5311, 0.9971, 0.8829, 0.1200, 0.4439, 0.8868, 0.5487, 0.0371, 0.9884, 0.7670, 0.7979, 0.5120, 0.3610, 0.8794, 0.5932, 0.1797, 0.3990, 0.9888, 0.9428, 0.9785, 0.3738, 0.6347, 0.8558, 0.8355, 0.3196, 0.7387, 0.1733, 0.9594, 0.2854, 0.1543, 0.6478, 0.8788, 0.2080, 0.0822, 0.4533, 0.5656, 0.2780, 0.1188, 0.0534, 0.8297, 0.3384, 0.2939, 0.9051, 0.7126, 0.1014, 0.1897, 0.3693, 0.2159, 0.6069, 0.0682, 0.1567, 0.3502, 0.8128, 0.3182, 0.8826, 0.6533, 0.7350, 0.4662, 0.8113, 0.0805, 0.7662, 0.7356, 0.0938, 0.2881, 0.0178, 0.6942, 0.3457, 0.0167, 0.5085, 0.7425, 0.1153, 0.3446, 0.0021, 0.3126, 0.5467, 0.3746, 0.8996, 0.0794, 0.9408, 0.3166, 0.0736, 0.0991, 0.7981, 0.7108, 0.5711, 0.1967, 0.4142, 0.0299, 0.7353, 0.2038, 0.6513, 0.7736, 0.8934, 0.7312, 0.8417, 0.9141, 0.0522, 0.0963, 0.7979, 0.8071, 0.9027, 0.6871, 0.3479, 0.5847, 0.8997, 0.3164, 0.4939, 0.1962, 0.0665, 0.4859, 0.8429, 0.3606, 0.1270, 0.9562, 0.2324, 0.4261, 0.6230, 0.9178, 0.3441, 0.0743, 0.4770, 0.7466, 0.7212, 0.7690, 0.5158, 0.4282, 0.5591, 0.6982, 0.1137, 0.1277, 0.0153, 0.1206, 0.6919, 0.3204, 0.5022, 0.8659, 0.4953, 0.3191, 0.3909, 0.1670, 0.1226, 0.4264, 0.6854, 0.8465), experience= structure(.Data= c(0.2629,0.7681,0.4632,0.0347,0.6942,0.3793,0.8257,0.9184,0.0291,0.0851,0.8664,0.6729,0.2141,0.8182,0.5112,0.7231,0.9994,0.2593,0.8889,0.0271,0.6617,0.7134,0.6322,0.9110,0.0120,0.7125,0.5071,0.0933,0.0230,0.2648,0.8506,0.2678,0.8157,0.9997,0.0773,0.3399,0.1228,0.5444,0.4311,0.8257,0.4885,0.8093,0.0001,0.8778,0.0001,0.1741,0.0709,0.3400,0.2406,0.2971,0.9526,0.1001,0.5464,0.0894,0.6025,0.0276,0.9064,0.3880,0.5732,0.3806,0.7190,0.1789,0.1442,0.4873,0.8045,0.2417,0.8119,0.8185,0.7720,0.6787,0.5158,0.5382,0.8638,0.5059,0.3876,0.0354,0.9578,0.6783,0.0319,0.4747,0.9542,0.3844,0.0079,0.5857,0.1346,0.2485,0.2870,0.1538,0.0010,0.1861,0.0347,0.2228,0.1196,0.3966,0.2915,0.7952,0.4074,0.1231,0.1007,0.5826,0.0764,0.3042,0.1891,0.4942,0.1045,0.0245,0.1810,0.7308,0.0728,0.9211,0.6812,0.0564,0.7717,0.7595,0.0920,0.1999,0.7267,0.9182,0.0896,0.0339,0.6062,0.3728,0.0664,0.0226,0.0752,0.1412,0.7591,0.4404,0.2357,0.1086,0.2877,0.2253,0.2956,0.6273,0.0738,0.9519,0.8066,0.4466,0.0418,0.9738,0.8396,0.9725,0.6497,0.3693,0.6813,0.3983,0.0200,0.6009,0.6164,0.6052,0.4636,0.8807,0.1421,0.2116,0.4143,0.3738,0.9617,0.0682,0.1688,0.1538,0.1285,0.8995,0.6934,0.0057,0.1195,0.6095,0.0494,0.5320,0.6330,0.6647,0.6116,0.8232,0.1508,0.9933,0.8368,0.7356,0.2172,0.3455,0.6099,0.3923,0.2825,0.5080,0.5701,0.4404,0.9591,0.4665,0.0793,0.9748,0.9938,0.6867,0.6185,0.3902,0.5138,0.2769,0.2276,0.0708,0.2742,0.4445,0.9312,0.7508,0.1703,0.0753,0.7895,0.9684,0.4555,0.0218,0.4901,0.2017,0.0980,0.5433,0.3669,0.4694,0.7725,0.2769,0.3994,0.1361,0.2416,0.4178,0.5189,0.6667,0.7780,0.1274,0.8801,0.3253,0.0966,0.5767,0.6950,0.4375,0.7114,0.7518,0.0042,0.5760,0.9706,0.0801,0.5861,0.3869,0.2437,0.6306,0.0127,0.8937,0.4739,0.0873,0.5443,0.5312,0.3961,0.8939,0.2280,0.6158,0.5501,0.0417,0.0881,0.3159,0.5368,0.8419,0.3673,0.3185,0.7340,0.5245,0.6264,0.0405,0.4443,0.0149,0.8185,0.4974,0.5145,0.7712,0.6375,0.3086,0.2312,0.3209,0.9835,0.3253,0.3270,0.6154,0.6886,0.9663,0.8905,0.6715,0.5690,0.1281,0.1671,0.8568,0.7297,0.3237,0.4054,0.0577,0.1956,0.2481,0.0294,0.8796,0.5131,0.7339,0.9583,0.9740,0.2746,0.6991,0.7349,0.7633,0.4825,0.5073,0.8835,0.6382,0.2358,0.1891,0.5486,0.4821,0.8166,0.1639,0.3181,0.6165,0.4448,0.0619,0.7530,0.0685,0.4661,0.1248,0.8485,0.7180,0.9784,0.0473,0.6058,0.8190,0.8133,0.3078,0.1029,0.6236,0.0025,0.9028,0.1272,0.6115,0.2060,0.5627,0.8659,0.4462,0.9255,0.5182,0.0365,0.4298,0.4611,0.3363,0.3493,0.4571,0.1674,0.9454,0.4449,0.9368,0.6917,0.6531,0.5986,0.9817,0.2233,0.9457,0.0960,0.3967,0.7945,0.2489,0.5041,0.6837,0.3732,0.9767,0.5621,0.9134,0.5258,0.9786,0.8562,0.1284,0.6784,0.9639,0.6932,0.6508,0.5262,0.6729,0.7072,0.1777,0.7622,0.2905,0.4120,0.2267,0.8588,0.9609,0.3782,0.2367,0.2346,0.5267,0.1183,0.5795,0.4363,0.0275,0.3049,0.1933,0.2466,0.1789,0.1216,0.9184,0.8881,0.7526,0.7371,0.2912,0.4794,0.6268,0.2401,0.5614,0.0362,0.0123,0.7117,0.0390,0.6956,0.5796,0.0945,0.8291,0.6037,0.0919,0.3609,0.1314,0.2872,0.9786,0.0948,0.2236,0.3038,0.4986,0.2842,0.0051,0.3092,0.3716,0.3062,0.1660,0.7654,0.9052,0.4202,0.2462,0.5897,0.1592,0.3862,0.7451,0.4944,0.8984,0.2347,0.6420,0.8763,0.2355,0.4374,0.6729,0.8412,0.3527,0.3810,0.1747,0.1984,0.3921,0.8700,0.4790), .Dim=c(150, 3)), R=150, T=3)
# Lecture 2. Likelihood
library(tidyverse)
theme_set(theme_bw(base_size=15))
#Sex ratio example
# Grid search
sexRatio<-data.frame(p=seq(0,1,by=0.01))
head(sexRatio)
sexRatio$Likelihood<-dbinom(15,20,sexRatio$p)
ggplot(sexRatio,aes(x=p,y=Likelihood))+geom_line()+
ggtitle("Likelihood")
ggplot(sexRatio,aes(x=p,y=log(Likelihood)))+geom_line()+
ggtitle("Log likelihood")
sexRatio$p[sexRatio$Likelihood==max(sexRatio$Likelihood)]   #Maximum likelihood parameter
sexRatio$LL<-log(sexRatio$Likelihood)
sexRatio$p[sexRatio$LL==max(sexRatio$LL)]   #Maximum likelihood parameter
# Minimization
?optim
getNegLogLike<-function(p) {
-dbinom(15,20,p,log=TRUE)
}
sexRatioModel<-optim(par=0.5,
fn=getNegLogLike,
method="Brent",
lower=0,
upper=1)
sexRatioModel
## Example of a mean, with Poisson data
data<-data.frame(x=c(6, 9, 8, 4, 12, 5, 7, 3, 4, 3, 3, 12, 8, 6, 3,
9, 8, 1, 3, 5),
index=1:20)
ggplot(data,aes(x=x))+geom_bar(fill="darkred")
ggplot(data,aes(x=index,y=x))+geom_point()+
geom_hline(yintercept=mean(data$x))
# grid search
meanVal<-data.frame(mean=seq(0.1,15,0.01))
head(meanVal)
for(i in 1:nrow(meanVal)) {
meanVal$LL[i]<-sum(dpois(data$x,meanVal$mean[i],log=TRUE))
}
#or using sapply
meanVal$LL<-sapply(meanVal$mean, function(meanval) sum(dpois(data$x,meanval,log=TRUE)))
#Note that R is summing over all the data points in one step.
ggplot(meanVal,aes(x=mean,y=LL))+geom_line()
meanVal$mean[meanVal$LL==max(meanVal$LL)]
mean(data$x)
#minimization
getNegLogLikePoisson<-function(mu,data) {
x<-data$x
LL<-dpois(x,mu,log=TRUE)
-sum(LL)
}
meanModel<-optim(par=3,
fn=getNegLogLikePoisson,
data=data,
method="Brent",
lower=0.1,upper=10)
meanModel
## Mean and standard deviation of a normal
# grid search
meanSdVal<-expand.grid(mean=seq(0.2,10,length=200),sd=seq(0.2,10,length=200))
head(meanSdVal)
for(i in 1:nrow(meanSdVal)) {
meanSdVal$LL[i]<-sum(dnorm(data$x,meanSdVal$mean[i],meanSdVal$sd[i],log=TRUE))
}
head(meanSdVal)
meanSdVal[meanSdVal$LL==max(meanSdVal$LL),] #maximum likelihood
bestmean<-meanSdVal$mean[meanSdVal$LL==max(meanSdVal$LL)]
bestsd<-meanSdVal$sd[meanSdVal$LL==max(meanSdVal$LL)]
bestmean;bestsd
summary(meanSdVal$LL)
#joint likelihood
ggplot(mutate(meanSdVal,LL=ifelse(LL>-100,LL,-100)),
aes(x=mean,y=sd,fill=LL))+
geom_tile()+
scale_fill_viridis_c()
#for mean and best sd
ggplot(filter(meanSdVal,sd==bestsd),aes(x=mean,y=LL))+
geom_line()
# for sd at best mean
ggplot(filter(meanSdVal,mean==bestmean),aes(x=sd,y=LL))+
geom_line()
# Minimizer function
getNegLogLikeNormal<-function(pars,data) {
x<-data$x
mu<-pars[1]
sd<-pars[2]
LL<-dnorm(x,mu,sd,log=TRUE)
-sum(LL)
}
meanSdModel<-optim(par=c(2,2),
fn=getNegLogLikeNormal,
data=data)
meanSdModel$par
#analytic values
mean(data$x)
sd(data$x)
# Adding Hessian
meanSdModel<-optim(par=c(2,2),
fn=getNegLogLikeNormal,
data=data,
hessian=TRUE)
meanSdModel  #Hessian
#This is the inversion to get the variance covariance model
varcovmat<-solve(meanSdModel$hessian)
round(varcovmat,3)
# Confidence intervals
meanCI<-c(meanSdModel$par[1]-2*sqrt(varcovmat[1,1]),
meanSdModel$par[1]+2*sqrt(varcovmat[1,1]))
sdCI<-c(meanSdModel$par[2]-2*sqrt(varcovmat[2,2]),
meanSdModel$par[2]+2*sqrt(varcovmat[2,2]))
round(meanCI,2)
round(sdCI,2)
#for mean and best sd
g1<-ggplot(filter(meanSdVal,sd==bestsd),aes(x=mean,y=LL))+
geom_line() +
geom_line(data=data.frame(CI=meanCI,y=rep(-50,2)),
aes(x=CI,y=y),color="red",lwd=2)
g1
#for  sd and best mean
g2<-ggplot(filter(meanSdVal,mean==bestmean,LL>-80),aes(x=sd,y=LL))+
geom_line()+
geom_line(data=data.frame(CI=sdCI,y=rep(-50,2)),
aes(x=CI,y=y),color="red",lwd=2)
g2
gridExtra::grid.arrange(g1,g2,ncol=2)
#This is the inversion to get the variance covariance model
varcovmat<-solve(meanSdModel$hessian)
varcovmat
varcovmat[1,1]
varcovmat[2,2]
sqrt(varcovmat[1,1])
sqrt(varcovmat[1,1])
varcovmat[1,2]/(sqrt(varcovmat[1,1])*sqrt(varcovmat[2,2]))
setwd("~/GitHub/bycatchStan/R")
library(tidyverse)
